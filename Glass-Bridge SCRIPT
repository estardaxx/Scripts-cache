-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- ================= WINDOW =================
local Window = Rayfield:CreateWindow({
    Name = "Crystal ESP Menu | Scriptax",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "Professional Script Menu",
    ShowText = "Open Menu",
    Theme = "Serenity",            -- tema actualizado
    ToggleUIKeybind = Enum.KeyCode.RightShift,
    KeySystem = false,
    ConfigurationSaving = { Enabled = false }
})

-- ================== SHARED VARS ==================
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- ===== ESP: stores originals so we can restore =====
local espEnabled = false
local espLoop    = nil
local originalProps = {}  -- [part] = {Color=..., Material=...}

local function getContainer()
    local root = workspace:FindFirstChild("Regenator")
    if not root then return nil end
    return root:FindFirstChild("Regenartor")
end

local function applyESPOnce()
    local container = getContainer()
    if not container then return end
    for _, model in ipairs(container:GetChildren()) do
        if model:IsA("Model") then
            local inner = model:FindFirstChild("modell")
            if inner then
                for _, part in ipairs(inner:GetChildren()) do
                    if part:IsA("BasePart") then
                        if not originalProps[part] then
                            originalProps[part] = { Color = part.Color, Material = part.Material }
                        end
                        local hasTouch = part:FindFirstChild("TouchInterest") ~= nil
                        part.Color = hasTouch and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(0, 255, 0)
                        part.Material = Enum.Material.Neon
                    end
                end
            end
        end
    end
end

local function resetESP()
    for part, props in pairs(originalProps) do
        if typeof(part) == "Instance" and part and part.Parent then
            part.Color = props.Color
            part.Material = props.Material
        end
    end
    originalProps = {}
end

local function startESPLoop()
    if espLoop then return end
    espLoop = task.spawn(function()
        while espEnabled do
            applyESPOnce()
            task.wait(2)
        end
    end)
end

local function stopESPLoop()
    espEnabled = false
    resetESP()
    espLoop = nil
end

-- ========= MOVEMENT (persists on respawn) =========
local savedWalkSpeed = 16
local savedJumpPower = 50

local function applyMovementTo(char)
    local hum = char:WaitForChild("Humanoid")
    hum.WalkSpeed = savedWalkSpeed
    hum.JumpPower = savedJumpPower
end

LocalPlayer.CharacterAdded:Connect(applyMovementTo)
if LocalPlayer.Character then
    task.spawn(function() applyMovementTo(LocalPlayer.Character) end)
end

-- ========= TELEPORT / AUTOFARM =========
local teleportPosition = Vector3.new(-0.7761471271514893, 555.5330200195312, -288.62420654296875)

local function doTeleport()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then char:MoveTo(teleportPosition) end
end

local farmEnabled = false
local farmLoop = nil
local function startFarm()
    if farmLoop then return end
    farmLoop = task.spawn(function()
        while farmEnabled do
            doTeleport()
            task.wait(0.75)
        end
    end)
end
local function stopFarm()
    farmEnabled = false
    farmLoop = nil
end

-- =================== TAB: MAIN ===================
local TabMain = Window:CreateTab("Main", "layers")
TabMain:CreateSection("ESP")
TabMain:CreateToggle({
    Name = "ESP Glasses",
    CurrentValue = false,
    Callback = function(v)
        espEnabled = v
        if v then startESPLoop() else stopESPLoop() end
    end,
})

TabMain:CreateSection("Movement")
TabMain:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 200},
    Increment = 1,
    CurrentValue = savedWalkSpeed,
    Callback = function(val)
        savedWalkSpeed = val
        local char = LocalPlayer.Character
        if char and char:FindFirstChild("Humanoid") then
            char.Humanoid.WalkSpeed = val
        end
    end,
})
TabMain:CreateSlider({
    Name = "JumpPower",
    Range = {50, 300},
    Increment = 5,
    CurrentValue = savedJumpPower,
    Callback = function(val)
        savedJumpPower = val
        local char = LocalPlayer.Character
        if char and char:FindFirstChild("Humanoid") then
            char.Humanoid.JumpPower = val
        end
    end,
})

-- ================= TAB: TELEPORTS =================
local TabTP = Window:CreateTab("Teleports", "map-pin")
TabTP:CreateSection("Positions")
TabTP:CreateButton({
    Name = "Teleport to Final",
    Callback = doTeleport
})
TabTP:CreateSection("AutoFarm")
TabTP:CreateToggle({
    Name = "AutoFarm Teleport",
    CurrentValue = false,
    Callback = function(v)
        farmEnabled = v
        if v then startFarm() else stopFarm() end
    end,
})

-- ================= TAB: KEYBINDS =================
local TabKeys = Window:CreateTab("Keybinds", "keyboard")
TabKeys:CreateSection("Custom Keybinds")

TabKeys:CreateKeybind({
    Name = "Toggle ESP",
    CurrentKeybind = "", -- vacío
    HoldToInteract = false,
    Callback = function()
        espEnabled = not espEnabled
        if espEnabled then startESPLoop() else stopESPLoop() end
    end,
})

TabKeys:CreateKeybind({
    Name = "Quick Teleport",
    CurrentKeybind = "", -- vacío
    HoldToInteract = false,
    Callback = doTeleport
})

TabKeys:CreateKeybind({
    Name = "Toggle Menu",
    CurrentKeybind = "LeftControl",
    HoldToInteract = false,
    Callback = function()
        Window:ToggleUI()
    end,
})

-- ================== CREDITS ==================
local TabCredits = Window:CreateTab("Credits", "award")
TabCredits:CreateSection("Script Information")
TabCredits:CreateLabel("Crystal ESP Menu | Made by Estardax ⚡")
TabCredits:CreateLabel("UI powered by Rayfield Library")
